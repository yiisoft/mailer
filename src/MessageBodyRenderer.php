<?php

declare(strict_types=1);

namespace Yiisoft\Mailer;

use RuntimeException;
use Throwable;
use Yiisoft\View\View;
use Yiisoft\View\ViewContextInterface;

use function html_entity_decode;
use function is_array;
use function is_string;
use function preg_match;
use function preg_replace;
use function strip_tags;
use function trim;

use const ENT_HTML5;
use const ENT_QUOTES;

/**
 * View renderer used to compose message body.
 */
final class MessageBodyRenderer implements ViewContextInterface
{
    /**
     * @var View The view instance.
     */
    private View $view;

    /**
     * @var string The directory containing view files for composing mail messages.
     */
    private string $viewPath;

    /**
     * @var string The HTML layout view name.
     *
     * It is the layout used to render HTML mail body. If the value is empty string, no layout will be applied.
     *
     * The property can take the following values:
     *
     * - a relative view name: a view file relative to {@see MessageBodyRenderer::$viewPath}, e.g., 'layouts/html'.
     * - an empty string: the layout is disabled.
     */
    private string $htmlLayout;

    /**
     * @var string The TEXT layout view name.
     *
     * This is the layout used to render TEXT mail body. If the value is empty string, no layout will be applied.
     *
     * The property can take the following values:
     *
     * - a relative view name: a view file relative to {@see MessageBodyRenderer::$viewPath}, e.g., 'layouts/text'.
     * - an empty string: the layout is disabled.
     */
    private string $textLayout;

    /**
     * @param View $view The view instance.
     * @param string $viewPath The directory containing view files for composing mail messages.
     * @param string $htmlLayout The HTML layout view name. It is the layout used to render HTML mail body.
     * @param string $textLayout The TEXT layout view name. This is the layout used to render TEXT mail body.
     */
    public function __construct(
        View $view,
        string $viewPath,
        string $htmlLayout = 'layouts/html',
        string $textLayout = 'layouts/text'
    ) {
        $this->view = $view;
        $this->viewPath = $viewPath;
        $this->htmlLayout = $htmlLayout;
        $this->textLayout = $textLayout;
    }

    public function getViewPath(): string
    {
        return $this->viewPath;
    }

    /**
     * Adds the rendered body to the message and returns it.
     *
     * @param MessageInterface $message The message to which the body will be added.
     * @param mixed $view The view to be used for rendering the message body.
     * This can be:
     * - a string, which represents the view name for rendering the HTML body of the email.
     *   In this case, the text body will be generated by applying `strip_tags()` to the HTML body.
     * - an array with 'html' and/or 'text' elements. The 'html' element refers to the view name
     *   for rendering the HTML body, while 'text' element is for rendering the text body.
     *   For example, `['html' => 'contact-html', 'text' => 'contact-text']`.
     * @param array $viewParameters The parameters (name-value pairs)
     * that will be extracted and available in the view file.
     * @param array $layoutParameters The parameters (name-value pairs)
     * that will be extracted and available in the layout file.
     *
     * @throws Throwable If an error occurred during rendering.
     *
     * @return MessageInterface The message with the added body.
     *
     * @psalm-suppress MixedArgument
     */
    public function addToMessage(
        MessageInterface $message,
        $view,
        array $viewParameters = [],
        array $layoutParameters = []
    ): MessageInterface {
        if (is_string($view)) {
            $html = $this->renderHtml($view, $viewParameters, $layoutParameters);
            return $message->withHtmlBody($html)->withTextBody($this->generateTextBodyFromHtml($html));
        }

        if (!is_array($view) || (!isset($view['html']) && !isset($view['text']))) {
            throw new RuntimeException(
                'The "$view" parameter must be a string or array with at least one "text" or "html" key.',
            );
        }

        if (isset($view['html'])) {
            $html = $this->renderHtml($view['html'], $viewParameters, $layoutParameters);
            $message = $message->withHtmlBody($html);
        }

        if (isset($view['text'])) {
            $text = $this->renderText($view['text'], $viewParameters, $layoutParameters);
            $message = $message->withTextBody($text);
        }

        if (isset($html) && !isset($text)) {
            $message = $message->withTextBody($this->generateTextBodyFromHtml($html));
        }

        return $message;
    }

    /**
     * Renders the HTML view specified with optional parameters and layout.
     *
     * @param string $view The view name of the view file.
     * @param array $viewParameters The parameters (name-value pairs)
     * that will be extracted and available in the view file.
     * @param array $layoutParameters The parameters (name-value pairs)
     * that will be extracted and available in the layout file.
     *
     * @throws Throwable If an error occurred during rendering.
     *
     * @see View::render()
     *
     * @return string The rendering HTML result.
     */
    public function renderHtml(string $view, array $viewParameters = [], array $layoutParameters = []): string
    {
        $content = $this->view->render($view, $viewParameters, $this);

        if ($this->htmlLayout === '') {
            return $content;
        }

        $layoutParameters['content'] = $content;
        return $this->view->render($this->htmlLayout, $layoutParameters, $this);
    }

    /**
     * Renders the TEXT view specified with optional parameters and layout.
     *
     * @param string $view The view name of the view file.
     * @param array $viewParameters The parameters (name-value pairs)
     * that will be extracted and available in the view file.
     * @param array $layoutParameters The parameters (name-value pairs)
     * that will be extracted and available in the layout file.
     *
     * @throws Throwable If an error occurred during rendering.
     *
     * @see View::render()
     *
     * @return string The rendering TEXT result.
     */
    public function renderText(string $view, array $viewParameters = [], array $layoutParameters = []): string
    {
        $content = $this->view->render($view, $viewParameters, $this);

        if ($this->textLayout === '') {
            return $content;
        }

        $layoutParameters['content'] = $content;
        return $this->view->render($this->textLayout, $layoutParameters, $this);
    }

    /**
     * Generates a TEXT body from an HTML body.
     *
     * @param string $html The HTML body.
     *
     * @return string The TEXT body.
     */
    private function generateTextBodyFromHtml(string $html): string
    {
        if (preg_match('~<body[^>]*>(.*?)</body>~is', $html, $match)) {
            $html = $match[1];
        }
        // remove style and script
        $html = preg_replace('~<((style|script))[^>]*>(.*?)</\1>~is', '', $html);
        // strip all HTML tags and decode HTML entities
        $text = html_entity_decode(strip_tags($html), ENT_QUOTES | ENT_HTML5);
        // improve whitespace
        $text = preg_replace("~^[ \t]+~m", '', trim($text));
        return preg_replace('~\R\R+~mu', "\n\n", $text);
    }
}
