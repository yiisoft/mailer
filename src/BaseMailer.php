<?php

declare(strict_types=1);

namespace Yiisoft\Mailer;

use function array_keys;
use function implode;
use function is_array;
use Psr\EventDispatcher\EventDispatcherInterface;
use Psr\Log\LoggerInterface;

use Throwable;
use Yiisoft\Mailer\Event\AfterSend;
use Yiisoft\Mailer\Event\BeforeSend;

/**
 * BaseMailer serves as a base class that implements the basic functions required by [[MailerInterface]].
 *
 * Concrete child classes may focus on implementing the [[sendMessage()]] method.
 */
abstract class BaseMailer implements MailerInterface
{
    private MessageFactoryInterface $messageFactory;
    private Composer $composer;
    private EventDispatcherInterface $eventDispatcher;
    private LoggerInterface $logger;

    public function __construct(MessageFactoryInterface $messageFactory, Composer $composer, EventDispatcherInterface $eventDispatcher, LoggerInterface $logger)
    {
        $this->messageFactory = $messageFactory;
        $this->composer = $composer;
        $this->eventDispatcher = $eventDispatcher;
        $this->logger = $logger;
    }

    /**
     * @return Composer message composer instance.
     */
    public function getComposer(): Composer
    {
        return $this->composer;
    }

    /**
     * Creates a new message instance and optionally composes its body content via view rendering.
     *
     * @param array|string|null $view the view to be used for rendering the message body. This can be:
     *
     * - a string, which represents the view name for rendering the HTML body of the email.
     *   In this case, the text body will be generated by applying `strip_tags()` to the HTML body.
     * - an array with 'html' and/or 'text' elements. The 'html' element refers to the view name
     *   for rendering the HTML body, while 'text' element is for rendering the text body. For example,
     *   `['html' => 'contact-html', 'text' => 'contact-text']`.
     * - null, meaning the message instance will be returned without body content.
     *
     * The view to be rendered can be specified in one of the following formats:
     *
     * - a relative view name (e.g. "contact") located under [[viewPath]].
     * @param array $parameters the parameters (name-value pairs) that will be extracted and made available in the view
     * file.
     *
     * @return MessageInterface message instance.
     */
    public function compose($view = null, array $parameters = []): MessageInterface
    {
        $message = $this->createMessage();
        if ($view === null) {
            return $message;
        }

        $this->composer->compose($message, $view, $parameters);

        return $message;
    }

    /**
     * Creates a new message instance.
     *
     * @return MessageInterface message instance.
     */
    protected function createMessage(): MessageInterface
    {
        return $this->messageFactory->create($this);
    }

    /**
     * Sends the given email message.
     * This method will log a message about the email being sent.
     * Child classes should implement [[sendMessage()]] with the actual email sending logic.
     *
     * @param MessageInterface $message email message instance to be sent
     *
     * @throws Throwable throws an exception on send fails.
     */
    public function send(MessageInterface $message): void
    {
        if (!$this->beforeSend($message)) {
            return;
        }

        $address = $message->getTo();
        if (is_array($address)) {
            $address = implode(', ', array_keys($address));
        }
        $this->logger->info('Sending email "' . $message->getSubject() . '" to "' . $address . '"');

        $this->sendMessage($message);
        $this->afterSend($message);
    }

    /**
     * Sends multiple messages at once.
     *
     * The default implementation simply calls [[send()]] multiple times.
     * Child classes may override this method to implement more efficient way of
     * sending multiple messages.
     *
     * @param array $messages list of email messages, which should be sent.
     *
     * @return array an array of fails messages, the corresponding error can be retrieved
     * by MessageInterface::getError.
     */
    public function sendMultiple(array $messages): array
    {
        $failed = [];
        /** @var MessageInterface[] $messages */
        foreach ($messages as $message) {
            try {
                $this->send($message);
            } catch (Throwable $e) {
                $message->setError($e);
                $failed[] = $message;
            }
        }

        return $failed;
    }

    /**
     * Sends the specified message.
     * This method should be implemented by child classes with the actual email sending logic.
     *
     * @param MessageInterface $message the message to be sent
     *
     * @throws Throwable throws an exception on send fails.
     */
    abstract protected function sendMessage(MessageInterface $message): void;

    /**
     * This method is invoked right before mail send.
     * You may override this method to do last-minute preparation for the message.
     * If you override this method, please make sure you call the parent implementation first.
     *
     * @param MessageInterface $message
     *
     * @return bool whether to continue sending an email.
     */
    protected function beforeSend(MessageInterface $message): bool
    {
        /** @var BeforeSend $event */
        $event = $this->eventDispatcher->dispatch(new BeforeSend($message));
        return !$event->isPropagationStopped();
    }

    /**
     * This method is invoked right after mail was send.
     * You may override this method to do some postprocessing or logging based on mail send status.
     * If you override this method, please make sure you call the parent implementation first.
     *
     * @param MessageInterface $message
     */
    protected function afterSend(MessageInterface $message): void
    {
        $this->eventDispatcher->dispatch(new AfterSend($message));
    }
}
