<?php

declare(strict_types=1);

namespace Yiisoft\Mailer\ViewMailer;

use Yiisoft\Mailer\MailerInterface;
use Yiisoft\Mailer\Message;
use Yiisoft\Mailer\MessageInterface;
use Yiisoft\Mailer\SendResults;

final class ViewMailer implements MailerInterface
{
    public function __construct(
        private readonly MailerInterface $mailer,
        private MessageBodyRenderer $messageBodyRenderer,
    ) {
    }

    /**
     * Returns a new instance with the specified message body template.
     *
     * @param MessageBodyTemplate $template The message body template instance.
     *
     * @return self The new instance.
     */
    public function withTemplate(MessageBodyTemplate $template): self
    {
        $new = clone $this;
        $new->messageBodyRenderer = $new->messageBodyRenderer->withTemplate($template);
        return $new;
    }

    /**
     * Returns a new instance with specified locale code.
     *
     * @param string $locale The locale code.
     *
     * @return self
     */
    public function withLocale(string $locale): self
    {
        $new = clone $this;
        $new->messageBodyRenderer = $new->messageBodyRenderer->withLocale($locale);
        return $new;
    }

    /**
     * Creates a new message instance and optionally composes its body content via view rendering.
     *
     * @param array<string, string>|string|null $view the view to be used for rendering the message body.
     * This can be:
     * - a string, which represents the view name for rendering the HTML body of the email.
     *   In this case, the text body will be generated by applying `strip_tags()` to the HTML body.
     * - an array with 'html' and/or 'text' elements. The 'html' element refers to the view name
     *   for rendering the HTML body, while 'text' element is for rendering the text body. For example,
     *   `['html' => 'contact-html', 'text' => 'contact-text']`.
     * - null, meaning the message instance will be returned without body content.
     * @param array $viewParameters The parameters (name-value pairs)
     * that will be extracted and available in the view file.
     * @param array $layoutParameters The parameters (name-value pairs)
     * that will be extracted and available in the layout file.
     *
     * @return MessageInterface The message instance.
     */
    public function compose($view = null, array $viewParameters = [], array $layoutParameters = []): MessageInterface
    {
        $message = new Message;

        if ($view === null) {
            return $message;
        }

        return $this->messageBodyRenderer->addToMessage($message, $view, $viewParameters, $layoutParameters);
    }

    public function send(MessageInterface $message): void
    {
        $this->mailer->send($message);
    }

    public function sendMultiple(array $messages): SendResults
    {
        return $this->mailer->sendMultiple($messages);
    }
}
